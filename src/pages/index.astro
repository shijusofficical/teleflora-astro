---
import AstroComponentBuilder from '@utils/AstroComponentBuilder.astro';
import Layout from '../layouts/Layout.astro';
import { any, date } from 'astro:schema';

const myHeaders = new Headers();
myHeaders.append("Authorization", `Bearer ${import.meta.env.STRAPI_TOKEN}`);

const requestOptions = {
  method: "GET",
  headers: myHeaders,
  redirect: "follow"
};

const [bodyContentResponse, navigationResponse] = await Promise.all([
  fetch(`${import.meta.env.STRAPI_URL}/home-pages?pLevel=10&locale=en`, requestOptions),
  fetch(`${import.meta.env.STRAPI_URL}/navigation-managements?pLevel=10&locale=en`, requestOptions)
]);

const bodyContent = await bodyContentResponse.json();
const navigation = await navigationResponse.json();

const data: {
  body: any;
  additionalData: any;
  productsWithDetails: any[];
} = {
  body: bodyContent,
  additionalData: navigation,
  productsWithDetails: []
};

const products = bodyContent?.data?.[0]?.content?.filter((item) => 
  item.__component === "banner.product-banner" || 
  item.__component === "banner.category-products"
);
const productsWithDetails = await Promise.all(
  products?.map(async (product) => {
    const productIds = product?.productIds || [];

    const productDetails = await Promise.all(
      productIds.map(async (id) => {
        try {
          const response = await fetch(
            `https://areas-grand-take-contract.trycloudflare.com/rest/model/atg/commerce/catalog/ProductCatalogActor/getProduct?productId=${id}`
          );
          if (!response.ok) {
            throw new Error(`Failed to fetch product ${id}: ${response.status}`);
          }

          const json = await response.json();
          const { displayName, largeImageUrl, highestSalePrice, lowestSalePrice } = json?.product || {};

          // Return only required fields
          return displayName && largeImageUrl ? { displayName, largeImageUrl, highestSalePrice, lowestSalePrice } : null;

        } catch (error) {
          console.error(`Error fetching product ${id}:`, error);
          return null;
        }
      })
    );

    // Return filtered product with details
    return {
      ...product,
      productDetails: productDetails.filter(Boolean),
    };
  })
);

data.productsWithDetails = productsWithDetails;

---

<Layout>
  <AstroComponentBuilder data={data} />
</Layout>
