---
import Layout from '../layouts/Layout.astro';
import TapeBanner from '@widgets/TapeBanner/TapeBanner';
import HeaderContainer from '@widgets/Header/HeaderContainer.astro';
import Footer from '@widgets/Footer/Footer';
import BannerCarousel from '@widgets/BannerCarousel/BannerCarousel';
import Grid4 from '@widgets/Grid4/view';
import Products from '@widgets/Products/ProductGrid';
import SingleBanner from '@widgets/SingleBanner/SingleBanner';
import GridR2R4 from '@widgets/GridR2R4/GridR2R4';
import CategoryProductsLayout from '@widgets/CategoryProducts/CategoryProductsLayout';


const myHeaders = new Headers();
myHeaders.append("Authorization", `Bearer ${import.meta.env.STRAPI_TOKEN}`);

const requestOptions = {
  method: "GET",
  headers: myHeaders,
  redirect: "follow"
};

const [bodyContentResponse, navigationResponse] = await Promise.all([
  fetch(`${import.meta.env.STRAPI_URL}/home-pages?pLevel=10&locale=en`, requestOptions),
  fetch(`${import.meta.env.STRAPI_URL}/navigation-managements?pLevel=10&locale=en`, requestOptions)
]);
const bodyContent = await bodyContentResponse.json();
const navigation = await navigationResponse.json();

const products = bodyContent?.data?.[0]?.content?.filter((item:any) => 
  item.__component === "banner.product-banner" || 
  item.__component === "banner.category-products"
);

const productsWithDetails = await Promise.all(
  products?.map(async (product:any) => {
    const productIds = product?.productIds || [];

    const productDetails = await Promise.all(
      productIds.map(async (id:any) => {
        try {
          const response = await fetch(
            `https://areas-grand-take-contract.trycloudflare.com/rest/model/atg/commerce/catalog/ProductCatalogActor/getProduct?productId=${id}`
          );
          if (!response.ok) {
            throw new Error(`Failed to fetch product ${id}: ${response.status}`);
          }

          const json = await response.json();
          const { displayName, largeImageUrl, highestSalePrice, lowestSalePrice } = json?.product || {};
          return displayName && largeImageUrl ? { displayName, largeImageUrl, highestSalePrice, lowestSalePrice } : null;

        } catch (error) {
          console.error(`Error fetching product ${id}:`, error);
          return null;
        }
      })
    );

    return {
      ...product,
      productDetails: productDetails.filter(Boolean),
    };
  })
);

---
<Layout>
  {bodyContent?.data?.[0]?.content?.map((item:any, index:any) => {
    switch (item.__component) {
      case 'common.announcement-bar':
        return <TapeBanner data={item} client:visible />;
      case 'common.header':
        return <HeaderContainer data={item} additionalData={navigation} />;
      case 'common.footer':
        return <Footer data={item} additionalData={navigation} client:visible />;
      case 'carousel.carousel':
        return <BannerCarousel  data={item} client:visible />;
      case 'grid.four-card-grid':
        return <Grid4 data={item} client:visible />;
      case 'banner.product-banner':
        return <Products data={item} productsWithDetails={productsWithDetails} client:visible />;
      case 'banner.single-banner':
        return <SingleBanner data={item} client:visible />;
      case 'grid.six-cards-grid':
        return <GridR2R4 data={item} client:visible />;
      case 'banner.category-products':
        return <CategoryProductsLayout  data={item} productsWithDetails={productsWithDetails} client:visible />;
      default:
        return null;
    }
  })}
</Layout>
